# Workflow to manually trigger the scraping of all help center documentation files
name: "Help Center batch files scraper"

on:
  workflow_dispatch:
    inputs:
      directory:
        description: 'Directory to process (if empty, will process all directories)'
        required: false
        type: string

jobs:
  find-dirs:
    if: inputs.directory == ''
    runs-on: ubuntu-latest
    name: Find directories to process
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get directories with markdown files
        id: find-dirs
        run: |
          DIRS=$(find docs -type f \( -name "*.md" -o -name "*.mdx" \) -exec dirname {} \; | sort -u)
          echo "Found directories:"
          echo "$DIRS"
          echo "directories<<EOF" >> "$GITHUB_OUTPUT"
          echo "$DIRS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Trigger processing for each directory
        # This step triggers a new workflow run for each directory found
        # It reads the directories list from the previous step's output
        # and uses the GitHub CLI (gh) to start a new workflow run
        # for each directory, passing the directory path as an input parameter
        run: |
          while IFS= read -r dir; do
            if [ ! -z "$dir" ]; then
              echo "Triggering workflow for directory: $dir"
              gh workflow run docsearch-scraper-batch.yml -f directory="$dir"
              # Add a small delay to avoid rate limits
              sleep 2
            fi
          done <<< "${{ steps.find-dirs.outputs.directories }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  process-dir:
    if: inputs.directory != ''
    runs-on: ubuntu-latest
    name: Process directory
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find files in directory
        id: find-files
        run: |
          DIR="${{ inputs.directory }}"
          echo "Processing directory: $DIR"
          FILES=$(find "$DIR" -maxdepth 1 -type f \( -name "*.md" -o -name "*.mdx" \) | tr '\n' ' ')
          echo "files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Helpcenter Scraper
        if: steps.find-files.outputs.files != ''
        uses: vtexdocs/devportal-docsearch-action@main
        with:
          algolia_application_id: '${{ secrets.ALGOLIA_APP_ID }}'
          algolia_api_key: ${{ secrets.ALGOLIA_WRITE_KEY }}
          files: './configs/scraper_helpcenter_files.json'
          added: ${{ steps.find-files.outputs.files }}